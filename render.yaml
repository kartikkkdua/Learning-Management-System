services:
  # Backend API Service
  - type: web
    name: lms-backend
    env: node
    buildCommand: cd backend && npm install
    startCommand: cd backend && npm start
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3001
      - key: MONGODB_URI
        sync: false  # Set this in Render dashboard
      - key: JWT_SECRET
        sync: false  # Set this in Render dashboard
      - key: FRONTEND_URL
        sync: false  # Set this in Render dashboard
      - key: EMAIL_HOST
        value: smtp.gmail.com
      - key: EMAIL_PORT
        value: 587
      - key: EMAIL_USER
        sync: false  # Set this in Render dashboard
      - key: EMAIL_PASS
        sync: false  # Set this in Render dashboard
      - key: EMAIL_FROM
        sync: false  # Set this in Render dashboard
      - key: CORS_ORIGIN
        sync: false  # Set this in Render dashboard
      - key: SESSION_SECRET
        sync: false  # Set this in Render dashboard
      - key: MAX_FILE_SIZE
        value: 52428800
      - key: RATE_LIMIT_MAX_REQUESTS
        value: 50
      - key: LOG_LEVEL
        value: info
      - key: HELMET_ENABLED
        value: true
      - key: TRUST_PROXY
        value: true
      - key: COMPRESSION_ENABLED
        value: true

  # Frontend Static Site
  - type: web
    name: lms-frontend
    env: static
    buildCommand: npm run build
    staticPublishPath: ./frontend/build
    envVars:
      - key: NODE_ENV
        value: production
      - key: CI
        value: false
      - key: GENERATE_SOURCEMAP
        value: false

# Database (if using Render PostgreSQL instead of MongoDB Atlas)
# databases:
#   - name: lms-db
#     databaseName: lms_production
#     user: lms_user